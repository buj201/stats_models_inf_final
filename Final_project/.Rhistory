LB = exp(peto_results$ci.lb)
UB = exp(peto_results$ci.ub)
table_string = sprintf("\\multicolumn{5}{l}{Fixed effect (Peto) meta-analysis of above %i trials: OR = %.2f (95 ", k, OR)
table_string = paste(table_string, "\\% CI: ", sep = "")
end_string = sprintf("%.2f, %.2f) %s",LB, UB, "} \\\\ \n")
table_string = paste(table_string, end_string, sep = "")
return(table_string)
}
make_DL_string = function(list_of_studies, MgMI_data){
DL_results = DL_analysis(list_of_studies, MgMI_data)
k = length(DL_results$logs)
OR = exp(DL_results$logDSL)
LB = exp(DL_results$logDSL - 1.96*DL_results$selogDSL)
UB = exp(DL_results$logDSL + 1.96*DL_results$selogDSL)
table_string = sprintf("\\multicolumn{5}{l}{Random effects (D-L) meta-analysis of above %i trials: OR = %.2f (95 ", k, OR)
table_string = paste(table_string, "\\% CI: ", sep = "")
end_string = sprintf("%.2f, %.2f) %s",LB, UB, "} \\\\ \n")
table_string = paste(table_string, end_string, sep = "")
return(table_string)
}
writeLines(make_peto_string(early_studies, MgMI))
###Make table
firstdf = MgMI[match(early_studies, MgMI$trialnam),c('trialnam','dead1','tot1','dead0','tot0')]
names(firstdf) = c('Trial', 'Deaths $r_i^M$', 'Patients $n_i^M$', 'Deaths $r_i^C$', 'Patients $n_i^C$')
seconddf = MgMI[match(middle_studies, MgMI$trialnam),c('trialnam','dead1','tot1','dead0','tot0')]
thirddf = MgMI[match(late_study, MgMI$trialnam),c('trialnam','dead1','tot1','dead0','tot0')]
library(xtable)
text_identity = function(x){
return(x)
}
table = print(xtable(firstdf), include.rownames = FALSE, comment=FALSE, sanitize.text.function = text_identity, table.placement = 'htbp')
table = gsub("\\end{tabular}\n\\end{table}\n","",table,  fixed = TRUE)
table = paste(table, make_peto_string(early_studies, MgMI))
table = paste(table, make_DL_string(early_studies, MgMI))
table = paste(table, print(xtable(seconddf), include.colnames = FALSE, include.rownames = FALSE, only.contents = TRUE, comment=FALSE))
table = paste(table,make_peto_string(c(early_studies, middle_studies), MgMI))
table = paste(table,make_DL_string(c(early_studies, middle_studies), MgMI))
table = paste(table, print(xtable(thirddf), include.colnames = FALSE, include.rownames = FALSE, only.contents = TRUE, comment=FALSE))
table = paste(table,make_peto_string(c(early_studies, middle_studies, late_study), MgMI))
table = paste(table,make_DL_string(c(early_studies, middle_studies, late_study), MgMI))
table = paste(table,"\\end{tabular}\n\\caption{Reproducing Table 2 from Higgens and Spiegelhalter}\n\\label{tab:Table2}\n\\end{table}\n")
table = gsub("table","table*", table)
fileConn = file("tex/table2.tex")
writeLines(table, fileConn)
close(fileConn)
###Make forest plots
par(cex=0.92)
png(filename="./figures/forest_early.png")
forest(peto_analysis(early_studies, MgMI), showweights = TRUE, transf=exp)
grid.text("Forest Plot for First Eight Studies", .5, .85, gp=gpar(cex=2))
grid.text("Study Name                                         Study Weight   Odds Ratio (CI)", .5, .79, gp=gpar(cex=1.2))
dev.off()
png(filename="./figures/forest_middle.png")
forest(peto_analysis(c(early_studies,middle_studies), MgMI), showweights = TRUE,transf=exp)
grid.text("Forest Plot for First 14 Studies", .5, .9, gp=gpar(cex=2))
grid.text("Study Name                                         Study Weight   Odds Ratio (CI)", .5, .84, gp=gpar(cex=1.2))
dev.off()
png(filename="./figures/forest_late.png")
forest(peto_analysis(c(early_studies,middle_studies,late_study), MgMI), showweights = TRUE,transf=exp)
grid.text("Forest Plot for All Studies", .5, .9, gp=gpar(cex=2))
grid.text("Study Name                                          Study Weight   Odds Ratio (CI)", .5, .84, gp=gpar(cex=1.2))
dev.off()
###Bayesian Modeling
library(rstan)
K = nrow(MgMI)
rc = MgMI$dead0
nc = MgMI$tot0
rm = MgMI$dead1
nm = MgMI$tot1
reference_prior = "data {
int<lower=0> K; 			// # trials
real<lower=0> rm[K]; 					// number of treatment deaths
real<lower=0> nm[K]; 					// total number of treatment patients
real<lower=0> rc[K]; 	// number of control deaths
real<lower=0> nc[K]; 	// total number of control deaths
}
transformed data {
real<lower=0> E[K];        // Expected number of treatment deaths
real w[K];                 // Variance of estimate in Peto method
real y[K];                 // Peto effect size estimate
E <- (rc + rm)/(nc + nm)*nm;
w <- (nc*nm*(rc + rm)*(nc + nm - rc - rm))/((nc + nm)^2*(nc+nm-1))
y <- (rm - E)/w
}
parameters{
real<lower=0> delta[K];    // Trial-level effect size
real<lower=0> deltanew;          // Average effect size
real<lower=0> tau;         // SD of effect size distribution
}
model {
//Modeling the data generating process
delta ~ normal(deltanew, tau);     //draw true effect size for each trial (implicit _K)
y ~ normal(delta, w);        //draw a measured effect size with noise
//place priors
deltanew ~ normal(0, 100);   // skeptical prior on mu with sd = 100
tau ~ normal(0,100); // skeptical prior on theta with sd = 100
}"
# Just to check
check_fit = stan(model_code = reference_prior, data = c("K", "rc", "nc",'rm','nm'), pars = c("delta","deltanew",'tau'), iter = 1, chains = 1)
print K
print(K)
###Bayesian Modeling
library(rstan)
K = nrow(MgMI)
rc = MgMI$dead0
nc = MgMI$tot0
rm = MgMI$dead1
nm = MgMI$tot1
reference_prior = "data {
int<lower=0> K; 			// # trials
real<lower=0> rm[K]; 					// number of treatment deaths
real<lower=0> nm[K]; 					// total number of treatment patients
real<lower=0> rc[K]; 	// number of control deaths
real<lower=0> nc[K]; 	// total number of control deaths
}
transformed data {
real<lower=0> E[K];        // Expected number of treatment deaths
real w[K];                 // Variance of estimate in Peto method
real y[K];                 // Peto effect size estimate
for (n in 1:K)
E[n] <- (rc[n] + rm[n])/(nc[n] + nm[n]) * nm[n];
for (n in 1:K)
w[n] <- (nc[n]*nm[n]*(rc[n]+rm[n])*(nc[n] + nm[n] - rc[n] -rm[n]))/((nc[n]+nm[n])^2*(nc[n] + nm[n] -1));
for (n in 1:K)
y[n] <- (rm[n] - E[n])/w[n];
}
parameters{
real<lower=0> delta[K];    // Trial-level effect size
real<lower=0> deltanew;          // Average effect size
real<lower=0> tau;         // SD of effect size distribution
}
model {
//place priors
deltanew ~ normal(0, 100);   // skeptical prior on mu with sd = 100
tau ~ normal(0,100); // skeptical prior on theta with sd = 100
//Modeling the data generating process
delta ~ normal(deltanew, tau);     //draw true effect size for each trial (implicit _K)
y ~ normal(delta, w);        //draw a measured effect size with noise
}"
# Just to check
check_fit = stan(model_code = reference_prior, data = c("K", "rc", "nc",'rm','nm'), pars = c("delta","deltanew",'tau'), iter = 1000, chains = 3)
print(check_fit)
schools_sim <- extract (check_fit, permuted=TRUE)
hist(check_fit$deltanew)
schools_sim
hist(check_fit$deltanew)
print(check_fit)
schools_sim <- extract (check_fit, permuted=TRUE)
hist(schools_sim$deltanew)
fit_reference_prior = stan(model_code = reference_prior, data = c("K", "rc", "nc",'rm','nm'), pars = c("delta","deltanew",'tau'), iter = 500000, chains = 3)
print(fit_reference_prior)
reference_prior <- extract (fit_reference_prior, permuted=TRUE)
hist(reference_prior$deltanew)
traceplot(fit_reference_prior, pars= "deltanew")
plot(fit_reference_prior)
reference_prior = "data {
int<lower=0> K; 			// # trials
real<lower=0> rm[K]; 					// number of treatment deaths
real<lower=0> nm[K]; 					// total number of treatment patients
real<lower=0> rc[K]; 	// number of control deaths
real<lower=0> nc[K]; 	// total number of control deaths
}
transformed data {
real<lower=0> E[K];        // Expected number of treatment deaths
real v[K];                 // Variance of estimate in Peto method
real y[K];                 // Peto effect size estimate
real w[K];                 // Inverse variance of estimate in Peto method
for (n in 1:K)
E[n] <- (rc[n] + rm[n])/(nc[n] + nm[n]) * nm[n];
for (n in 1:K)
v[n] <- (nc[n]*nm[n]*(rc[n]+rm[n])*(nc[n] + nm[n] - rc[n] -rm[n]))/((nc[n]+nm[n])^2*(nc[n] + nm[n] -1));
for (n in 1:K)
y[n] <- (rm[n] - E[n])/v[n];
for (n in 1:K)
w[n] <- 1/v[n];
}
parameters{
real<lower=0> delta[K];    // Trial-level effect size
real<lower=0> deltanew;          // Average effect size
real<lower=0> tau;         // SD of effect size distribution
}
model {
//place priors
deltanew ~ normal(0, 100);   // reference prior on deltanew with sd = 100
tau ~ normal(0,100); // reference prior on tau with sd = 100
//Modeling the data generating process
delta ~ normal(deltanew, tau);     //draw true effect size for each trial (implicit _K)
y ~ normal(delta, w);        //draw a measured effect size with noise
}"
# Just to check
fit_reference_prior = stan(model_code = reference_prior, data = c("K", "rc", "nc",'rm','nm'), pars = c("delta","deltanew",'tau'), iter = 500000, chains = 3)
traceplot(fit_reference_prior, pars= "deltanew")
print(fit_reference_prior)
library(rstan)
K = nrow(MgMI)
rc = MgMI$dead0
nc = MgMI$tot0
rm = MgMI$dead1
nm = MgMI$tot1
reference_prior = "data {
int<lower=0> K; 			// # trials
real<lower=0> rm[K]; 					// number of treatment deaths
real<lower=0> nm[K]; 					// total number of treatment patients
real<lower=0> rc[K]; 	// number of control deaths
real<lower=0> nc[K]; 	// total number of control deaths
}
transformed data {
real<lower=0> E[K];        // Expected number of treatment deaths
real v[K];                 // Variance of estimate in Peto method
real y[K];                 // Peto effect size estimate
real w[K];                 // Inverse variance of estimate in Peto method
for (n in 1:K)
E[n] <- (rc[n] + rm[n])/(nc[n] + nm[n]) * nm[n];
for (n in 1:K)
v[n] <- (nc[n]*nm[n]*(rc[n]+rm[n])*(nc[n] + nm[n] - rc[n] -rm[n]))/((nc[n]+nm[n])^2*(nc[n] + nm[n] -1));
for (n in 1:K)
y[n] <- (rm[n] - E[n])/v[n];
for (n in 1:K)
w[n] <- sqrt(1/v[n]);
}
parameters{
real<lower=0> delta[K];    // Trial-level effect size
real<lower=0> deltanew;          // Average effect size
real<lower=0> tau;         // SD of effect size distribution
}
model {
//place priors
deltanew ~ normal(0, 100);   // reference prior on deltanew with sd = 100
tau ~ normal(0,100); // reference prior on tau with sd = 100
//Modeling the data generating process
delta ~ normal(deltanew, tau);     //draw true effect size for each trial (implicit _K)
y ~ normal(delta, w);        //draw a measured effect size with noise
}"
# Just to check
fit_reference_prior = stan(model_code = reference_prior, data = c("K", "rc", "nc",'rm','nm'), pars = c("delta","deltanew",'tau'), iter = 500000, chains = 3)
print(fit_reference_prior)
reference_prior <- extract (fit_reference_prior, permuted=TRUE)
hist(reference_prior$deltanew)
traceplot(fit_reference_prior, pars= "deltanew")
plot(fit_reference_prior)
###Bayesian Modeling
library(rstan)
K = nrow(MgMI)
rc = MgMI$dead0
nc = MgMI$tot0
rm = MgMI$dead1
nm = MgMI$tot1
reference_prior = "data {
int<lower=0> K; 			// # trials
real<lower=0> rm[K]; 					// number of treatment deaths
real<lower=0> nm[K]; 					// total number of treatment patients
real<lower=0> rc[K]; 	// number of control deaths
real<lower=0> nc[K]; 	// total number of control deaths
}
transformed data {
real<lower=0> E[K];        // Expected number of treatment deaths
real v[K];                 // Variance of estimate in Peto method
real y[K];                 // Peto effect size estimate
real w[K];                 // Inverse variance of estimate in Peto method
for (n in 1:K)
E[n] <- (rc[n] + rm[n])/(nc[n] + nm[n]) * nm[n];
for (n in 1:K)
v[n] <- (nc[n]*nm[n]*(rc[n]+rm[n])*(nc[n] + nm[n] - rc[n] -rm[n]))/((nc[n]+nm[n])^2*(nc[n] + nm[n] -1));
for (n in 1:K)
y[n] <- (rm[n] - E[n])/v[n];
for (n in 1:K)
w[n] <- sqrt(1/v[n]) \\ Recall the normal dist in STAN takes sd as param;
}
parameters{
real<lower=0> delta[K];    // Trial-level effect size
real<lower=0> deltanew;          // Average effect size
real<lower=0> tau;         // SD of effect size distribution
}
model {
//place priors
deltanew ~ normal(0, 100);   // reference prior on deltanew with sd = 100
tau ~ uniform(0,100); // reference prior on tau with sd = 100
//Modeling the data generating process
delta ~ normal(deltanew, tau);     //draw true effect size for each trial (implicit _K)
y ~ normal(delta, w);        //draw a measured effect size with noise
}"
# Just to check
fit_reference_prior = stan(model_code = reference_prior, data = c("K", "rc", "nc",'rm','nm'), pars = c("delta","deltanew",'tau'), iter = 500000, chains = 3)
print(fit_reference_prior)
###Bayesian Modeling
library(rstan)
K = nrow(MgMI)
rc = MgMI$dead0
nc = MgMI$tot0
rm = MgMI$dead1
nm = MgMI$tot1
reference_prior = "data {
int<lower=0> K; 			// # trials
real<lower=0> rm[K]; 					// number of treatment deaths
real<lower=0> nm[K]; 					// total number of treatment patients
real<lower=0> rc[K]; 	// number of control deaths
real<lower=0> nc[K]; 	// total number of control deaths
}
transformed data {
real<lower=0> E[K];        // Expected number of treatment deaths
real v[K];                 // Variance of estimate in Peto method
real y[K];                 // Peto effect size estimate
real w[K];                 // Inverse variance of estimate in Peto method
for (n in 1:K)
E[n] <- (rc[n] + rm[n])/(nc[n] + nm[n]) * nm[n];
for (n in 1:K)
v[n] <- (nc[n]*nm[n]*(rc[n]+rm[n])*(nc[n] + nm[n] - rc[n] -rm[n]))/((nc[n]+nm[n])^2*(nc[n] + nm[n] -1));
for (n in 1:K)
y[n] <- (rm[n] - E[n])/v[n];
for (n in 1:K)
w[n] <- sqrt(1/v[n]) // Recall the normal dist in STAN takes sd as param;
}
parameters{
real<lower=0> delta[K];    // Trial-level effect size
real<lower=0> deltanew;          // Average effect size
real<lower=0> tau;         // SD of effect size distribution
}
model {
//place priors
deltanew ~ normal(0, 100);   // reference prior on deltanew with sd = 100
tau ~ uniform(0,100); // reference prior on tau with sd = 100
//Modeling the data generating process
delta ~ normal(deltanew, tau);     //draw true effect size for each trial (implicit _K)
y ~ normal(delta, w);        //draw a measured effect size with noise
}"
# Just to check
fit_reference_prior = stan(model_code = reference_prior, data = c("K", "rc", "nc",'rm','nm'), pars = c("delta","deltanew",'tau'), iter = 500000, chains = 3)
###Bayesian Modeling
library(rstan)
K = nrow(MgMI)
rc = MgMI$dead0
nc = MgMI$tot0
rm = MgMI$dead1
nm = MgMI$tot1
reference_prior = "data {
int<lower=0> K; 			// # trials
real<lower=0> rm[K]; 					// number of treatment deaths
real<lower=0> nm[K]; 					// total number of treatment patients
real<lower=0> rc[K]; 	// number of control deaths
real<lower=0> nc[K]; 	// total number of control deaths
}
transformed data {
real<lower=0> E[K];        // Expected number of treatment deaths
real v[K];                 // Variance of estimate in Peto method
real y[K];                 // Peto effect size estimate
real w[K];                 // Inverse variance of estimate in Peto method
for (n in 1:K)
E[n] <- (rc[n] + rm[n])/(nc[n] + nm[n]) * nm[n];
for (n in 1:K)
v[n] <- (nc[n]*nm[n]*(rc[n]+rm[n])*(nc[n] + nm[n] - rc[n] -rm[n]))/((nc[n]+nm[n])^2*(nc[n] + nm[n] -1));
for (n in 1:K)
y[n] <- (rm[n] - E[n])/v[n];
for (n in 1:K)
w[n] <- sqrt(1/v[n]); // Recall the normal dist in STAN takes sd as param
}
parameters{
real<lower=0> delta[K];    // Trial-level effect size
real<lower=0> deltanew;          // Average effect size
real<lower=0> tau;         // SD of effect size distribution
}
model {
//place priors
deltanew ~ normal(0, 100);   // reference prior on deltanew with sd = 100
tau ~ uniform(0,100); // reference prior on tau with sd = 100
//Modeling the data generating process
delta ~ normal(deltanew, tau);     //draw true effect size for each trial (implicit _K)
y ~ normal(delta, w);        //draw a measured effect size with noise
}"
# Just to check
fit_reference_prior = stan(model_code = reference_prior, data = c("K", "rc", "nc",'rm','nm'), pars = c("delta","deltanew",'tau'), iter = 500000, chains = 3)
print(fit_reference_prior)
hist(reference_prior$deltanew)
reference_prior <- extract (fit_reference_prior, permuted=TRUE)
hist(reference_prior$deltanew)
traceplot(fit_reference_prior, pars= "deltanew")
print(nc)
print(rc)
fit_reference_prior = stan(model_code = reference_prior, data = c("K", "rm", "nm",'rc','nc'), pars = c("delta","deltanew",'tau'), iter = 500000, chains = 3)
fit_reference_prior = stan(model_code = reference_prior, data = c("K", "rm", "nm",'rc','nc'), pars = c("delta","deltanew",'tau'), iter = 500000, chains = 3)
reference_prior = "data {
int<lower=0> K; 			// # trials
real<lower=0> rm[K]; 					// number of treatment deaths
real<lower=0> nm[K]; 					// total number of treatment patients
real<lower=0> rc[K]; 	// number of control deaths
real<lower=0> nc[K]; 	// total number of control deaths
}
transformed data {
real<lower=0> E[K];        // Expected number of treatment deaths
real v[K];                 // Variance of estimate in Peto method
real y[K];                 // Peto effect size estimate
real w[K];                 // Inverse variance of estimate in Peto method
for (n in 1:K){
E[n] <- (rc[n] + rm[n])/(nc[n] + nm[n]) * nm[n];
v[n] <- (nc[n]*nm[n]*(rc[n]+rm[n])*(nc[n] + nm[n] - rc[n] -rm[n]))/((nc[n]+nm[n])^2*(nc[n] + nm[n] -1));
y[n] <- (rm[n] - E[n])/v[n];
w[n] <- sqrt(1/v[n]); // Recall the normal dist in STAN takes sd as param
}
}
parameters{
real<lower=0> delta[K];    // Trial-level effect size
real<lower=0> deltanew;          // Average effect size
real<lower=0> tau;         // SD of effect size distribution
}
model {
//place priors
deltanew ~ normal(0, 100);   // reference prior on deltanew with sd = 100
tau ~ uniform(0,100); // reference prior on tau with sd = 100
//Modeling the data generating process
delta ~ normal(deltanew, tau);     //draw true effect size for each trial (implicit _K)
y ~ normal(delta, w);        //draw a measured effect size with noise
}"
# Just to check
fit_reference_prior = stan(model_code = reference_prior, data = c("K", "rm", "nm",'rc','nc'), pars = c("delta","deltanew",'tau'), iter = 500000, chains = 3)
print(fit_reference_prior)
reference_prior = "data {
int<lower=0> K; 			// # trials
real<lower=0> rm[K]; 					// number of treatment deaths
real<lower=0> nm[K]; 					// total number of treatment patients
real<lower=0> rc[K]; 	// number of control deaths
real<lower=0> nc[K]; 	// total number of control deaths
}
transformed data {
real<lower=0> E[K];        // Expected number of treatment deaths
real v[K];                 // Variance of estimate in Peto method
real y[K];                 // Peto effect size estimate
real w[K];                 // Inverse variance of estimate in Peto method
for (n in 1:K){
E[n] <- (rc[n] + rm[n])/(nc[n] + nm[n]) * nm[n];
v[n] <- (nc[n]*nm[n]*(rc[n]+rm[n])*(nc[n] + nm[n] - rc[n] -rm[n]))/((nc[n]+nm[n])^2*(nc[n] + nm[n] -1));
y[n] <- (rm[n] - E[n])/v[n];
w[n] <- sqrt(1/v[n]); // Recall the normal dist in STAN takes sd as param
}
}
parameters{
real delta[K];    // Trial-level effect size
real deltanew;          // Average effect size
real<lower=0> tau;         // SD of effect size distribution
}
model {
//place priors
deltanew ~ normal(0, 100);   // reference prior on deltanew with sd = 100
tau ~ uniform(0,100); // reference prior on tau with sd = 100
//Modeling the data generating process
delta ~ normal(deltanew, tau);     //draw true effect size for each trial (implicit _K)
y ~ normal(delta, w);        //draw a measured effect size with noise
}"
# Just to check
fit_reference_prior = stan(model_code = reference_prior, data = c("K", "rm", "nm",'rc','nc'), pars = c("delta","deltanew",'tau'), iter = 500000, chains = 3)
print(fit_reference_prior)
reference_prior <- extract (fit_reference_prior, permuted=TRUE)
hist(reference_prior$deltanew)
traceplot(fit_reference_prior, pars= "deltanew")
hist(reference_prior$tau)
hist(exp(reference_prior$deltanew))
hist(exp(reference_prior$deltanew), bins=100)
?hist
hist(exp(reference_prior$deltanew), breaks=100)
skeptical_prior = "data {
int<lower=0> K; 			// # trials
real<lower=0> rm[K]; 					// number of treatment deaths
real<lower=0> nm[K]; 					// total number of treatment patients
real<lower=0> rc[K]; 	// number of control deaths
real<lower=0> nc[K]; 	// total number of control deaths
}
transformed data {
real<lower=0> E[K];        // Expected number of treatment deaths
real<lower=0> v[K];                 // Variance of estimate in Peto method
real y[K];                 // Peto effect size estimate
real w[K];                 // Inverse variance of estimate in Peto method
for (n in 1:K){
E[n] <- (rc[n] + rm[n])/(nc[n] + nm[n]) * nm[n];
v[n] <- (nc[n]*nm[n]*(rc[n]+rm[n])*(nc[n] + nm[n] - rc[n] -rm[n]))/((nc[n]+nm[n])^2*(nc[n] + nm[n] -1));
y[n] <- (rm[n] - E[n])/v[n];
w[n] <- sqrt(1/v[n]); // Recall the normal dist in STAN takes sd as param
}
}
parameters{
real delta[K];    // Trial-level effect size
real deltanew;          // Average effect size
real<lower=0> tau;         // SD of effect size distribution
}
model {
//place priors
deltanew ~ normal(0, 0.03);   // skeptical prior on deltanew with sd = 0.03
tau ~ uniform(0,100); // reference prior on tau with sd = 100
//Modeling the data generating process
delta ~ normal(deltanew, tau);     //draw true effect size for each trial (implicit _K)
y ~ normal(delta, w);        //draw a measured effect size with noise
}"
# Just to check
fit_skeptical_prior = stan(model_code = skeptical_prior, data = c("K", "rm", "nm",'rc','nc'), pars = c("delta","deltanew",'tau'), iter = 500000, chains = 3)
print(fit_skeptical_prior)
skeptical_prior <- extract (fit_fit_skeptical_prior_prior, permuted=TRUE)
hist(exp(skeptical_prior$deltanew), breaks=100)
skeptical_prior <- extract (fit_skeptical_prior_prior, permuted=TRUE)
hist(exp(skeptical_prior$deltanew), breaks=100)
skeptical_prior <- extract (fit_skeptical_prior, permuted=TRUE)
hist(exp(skeptical_prior$deltanew), breaks=100)
traceplot(fit_reference_prior, pars= "deltanew")
traceplot(fit_skeptical_prior, pars= "deltanew")
hist(exp(reference_prior_return_vals$deltanew), breaks=100)
##Fit skeptical prior and create plots
fit_skeptical_prior = stan(model_code = skeptical_prior, data = c("K", "rm", "nm",'rc','nc'), pars = c("delta","deltanew",'tau'), iter = 500000, chains = 3)
skeptical_prior_return_vals <- extract(fit_skeptical_prior, permuted=TRUE)
hist(exp(skeptical_prior_return_vals$deltanew), breaks=100)
traceplot(fit_skeptical_prior, pars= "deltanew", ylab = expression(delta[new]), main = expression('Trace plot for delta[new] under skeptical prior'))
##Fit reference prior and create plots
fit_reference_prior = stan(model_code = reference_prior, data = c("K", "rm", "nm",'rc','nc'), pars = c("delta","deltanew",'tau'), iter = 500000, chains = 3)
reference_prior_return_vals <- extract (fit_reference_prior, permuted=TRUE)
hist(exp(reference_prior_return_vals$deltanew), breaks=100)
traceplot(fit_skeptical_prior, pars= "deltanew", ylab = expression(delta[new]), main = expression('Trace plot for delta[new] under reference prior'))
asdf
